{{ template "header" . }}
<!-- Left Panel -->
<!-- Right Panel -->
<div id="right-panel" class="right-panel">
    <div class="breadcrumbs">
        <div class="col-sm-4">
            <div class="page-header float-left">
                <div class="page-title">
                    <h1>地图</h1>
                </div>
            </div>
        </div>
        <div class="col-sm-8">
            <div class="page-header float-right">
                <div class="page-title">
                    <ol class="breadcrumb text-right">
                        <li class="active" style="text-transform:none;">{{ .Family }}</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <div class="content mt-3">
        {{ with .Message }}
        <div class="col-sm-12">
            <div class="alert  alert-success alert-dismissible fade show" role="alert">
                {{.}}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
        {{ end }} {{ with .ErrorMessage }}
        <div class="col-sm-12">
            <div class="alert  alert-danger alert-dismissible fade show" role="alert">
                {{.}}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
        {{ end }}


    <div class="col-sm-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <h4 class="card-title mb-0">关于</h4>
                        </div>
                        <div class="col-sm-12">
                            <p>该地图实时显示每个单独设备的位置。如果没有显示设备，则设备中当前没有移动。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="col-sm-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-8">
                            <h4 class="card-title mb-0">当前位置</h4>
                        </div>
                    </div>
                    
                    <div class="content mt-3">
                        <div id="map" style="height:500px;"></div>
                    </div>
                </div>
            </div>
        </div>


    </div>
    <!-- .content -->
</div>
<!-- /#right-panel -->
<!-- Right Panel -->
<script src="/static/js/lib/data-table/datatables.min.js"></script>
<script src="/static/js/lib/data-table/dataTables.bootstrap.min.js"></script>
<script src="/static/js/lib/data-table/dataTables.buttons.min.js"></script>
<script src="/static/js/lib/data-table/buttons.bootstrap.min.js"></script>
<script src="/static/js/lib/data-table/jszip.min.js"></script>
<script src="/static/js/lib/data-table/pdfmake.min.js"></script>
<script src="/static/js/lib/data-table/vfs_fonts.js"></script>
<script src="/static/js/lib/data-table/buttons.html5.min.js"></script>
<script src="/static/js/lib/data-table/buttons.print.min.js"></script>
<script src="/static/js/lib/data-table/buttons.colVis.min.js"></script>
<script src="/static/js/lib/data-table/datatables-init.js"></script>
<script src="/static/js/jquery.autocomplete.js"></script>
<script type="text/javascript">
function toTitleCase(str)
{
    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
}
function timeSince(date) {

  var seconds = Math.floor((new Date() - date) / 1000);

  var interval = Math.floor(seconds / 31536000);

  if (interval > 1) {
    return interval + " years";
  }
  interval = Math.floor(seconds / 2592000);
  if (interval > 1) {
    return interval + " months";
  }
  interval = Math.floor(seconds / 86400);
  if (interval > 1) {
    return interval + " days";
  }
  interval = Math.floor(seconds / 3600);
  if (interval > 1) {
    return interval + " hours";
  }
  interval = Math.floor(seconds / 60);
  if (interval > 1) {
    return interval + " minutes";
  }
  return Math.floor(seconds) + " seconds";
}

var date  = new Date();

(function($) {
    var tileLayer = new L.TileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',{
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
      maxZoom: 22,
       maxNativeZoom: 20
    });

    var map = new L.Map('map', {
      'center': [{{.Center}}],
      'zoom': 20,
      'layers': [tileLayer]
    });

    var marker = {}


    
    function iterateClock() {
        $("#timesince").text(timeSince(date));
    }
    setInterval(iterateClock,1000);


    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": false,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }


String.prototype.hashCode = function() {
  var hash = 0, i, chr;
  if (this.length === 0) return hash;
  for (i = 0; i < this.length; i++) {
    chr   = this.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};

var socket;

const socketMessageListener = (event) => {
    data = JSON.parse(event.data);
    console.log(data);
    var device = data['sensors']['d']
    var hashedMove = device.hashCode()/40000000000000;
    console.log(hashedMove);
    var seenDate = new Date(0);
    seenDate.setUTCMilliseconds(data.sensors.t);
    var popupContent = "Location: " + data['location'] + "<br>Probability: " + Math.round(data['guesses'][0]['probability']*100) + "%" + "<br>Seen at " + seenDate; 
    var toolTipContent = device;
    if (!marker.hasOwnProperty(device)) {
        marker[device] = L.marker([
            data['sensors']['gps']['lat'] + hashedMove,
            data['sensors']['gps']['lon'] + hashedMove
        ])
        .bindPopup(popupContent)
        .bindTooltip(toolTipContent,
            {permanent: true, 
            direction: 'top'
        })
        .addTo(map);
    } else {
        marker[device]
            .setPopupContent(popupContent)
            .setTooltipContent(toolTipContent)
            .setLatLng(new L.LatLng(data['sensors']['gps']['lat']+hashedMove,hashedMove+data['sensors']['gps']['lon']))
            .update();
    }
};

const socketOpenListener = (event) => {
  console.log('Connected');
  socket.send('hello');
};

const socketCloseListener = (event) => {
  if (socket) {
    console.error('Disconnected.');
  }
  var url = window.origin.replace("http", "ws") + '/ws?device=all&family={{.FamilyJS}}';
  socket = new WebSocket(url);
  socket.addEventListener('open', socketOpenListener);
  socket.addEventListener('message', socketMessageListener);
  socket.addEventListener('close', socketCloseListener);
};

socketCloseListener();


})(jQuery);
</script>

<script>




function update_position() {
    $.getJSON('/api/v1/by_location/{{.Family}}', function(data) {
        console.log(data['locations'].length);
        var updatedMarkers = {}
        for (i = 0; i < data['locations'].length; i++) {
            console.log(data['locations'][i])
            console.log(data);
            var locData = data['locations'][i]['location'];
            var devices = []
            for (j = 0; j < data['locations'][i]['devices'].length; j++) {
                devices.push(data['locations'][i]['devices'][j]['device']);
            }
            var popupContent = devices.join(", ");
            var toolTipContent = locData + ': ' + data['locations'][i]['devices'].length + " devices";

            if (!marker.hasOwnProperty(locData)) {
                marker[locData] = L.marker([
                    data['locations'][i]['gps']['lat'],
                    data['locations'][i]['gps']['lon']
                ])
                .bindPopup(popupContent)
                .bindTooltip(toolTipContent,
                    {permanent: true, 
                    direction: 'top'
                })
                .addTo(map);
            } else {
                marker[locData]
                    .setPopupContent(popupContent)
                    .setTooltipContent(toolTipContent)
                    .update();
            }
            updatedMarkers[locData] = true;
        } 

        // remove markers for which there were no updates (no devices at them)
        for (key in marker) {
            console.log(marker[key]);
            if (updatedMarkers.hasOwnProperty(key)) {
                continue
            }
            // delete marker
            map.removeLayer(marker[key]);
            delete marker[key];
        }

        setTimeout(update_position, 1000);
    });
}

</script>


{{ template "footer" . }}